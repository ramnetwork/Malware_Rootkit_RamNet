import os 
import sys 
from funktions.encode_asimetric.decode import imported
from funktions.encode_asimetric.decode import decode
from funktions.MD5.decript_md5 import dec
import getpass
from funktions.MD5.encript_MD5 import enc
class importDatabase:
    def rsa(file1):
        a=imported.read_private(file1)
        b= b'\xae\xbe\x06\xc2d\xb5;\x86\xfb2\xc2\x96\xbc\xaf=\xa1,\xa3\xca\xc57\x03C*8\x8f\xb6>/~\xf3^\x8e\xf4\x94\xb0\xfe\x1b\xa33\xa0@,\xe4\x92\xcb\xd5\x12\x9f\xfd\x80\xcc\xb1$\xfc\x01\xb8\xff\xa6\xbd\xdbXy\x16\x9a\x8b\xfeO\xaf~A\xd5\x18-\xd0\n\xd2\xc1Ud5\x9a/\n\x7f\xcb\xf70\xa9\x0fj\x94\x11\x9d\x9bo*\x14\xaa\xf0\xef\xfc\r2\xecHFR\xc6\x9a6U\xfe\x88*o\x06\xd1\x84\xaf\xf1FE\x94\x03Nf:g\xc1\xb3i?^\x17\x1b\x08e\xe4\xb4\x0f\xa2\xb2C(\xa7\xfe\xe7|~\x7f\xd4K\x82R\x16\xb0~/-\xd8F\x0eA\xc3\xda\xc4W\x0etC3\xf8l\xf4z\xb2\xc6$\xc4g\xaf\xfc\x16Y\xd0\xa0\xdeI7\xb8\xa0\xa0\x0e\n\xb1\xb7\x7f\x9c\xdc\x11\x1a\xec\xac\xc9b1)\x04\xd5\x1f\x8c>1\xa5\x99\xb8w\xb9\x113\x08\xa9Jq\x02\x02\xb2\xbb\t\xc8\x98j\xdc\xc2\x1a?\xf9\xa4\x80\x96\x8fs_WH\x96\xd2o\xe5C\xf4)r\xa2|'
        plainte=decode.dec(a,b)
        return plainte



class funk:
    def comp(a,b):
        s=dec.compare(a, b)
        return s
    def rsaTohash(rsa):
        pass_tocompare=enc.enc_withoutfile(rsa)
        return pass_tocompare
    def input_to_hash(a):
        pass_tocompare=enc.enc_withoutfile1(a)
        return pass_tocompare

def main():
    a=1
    conter=0
    while a==1 and conter < 3:
        os.system("clear")
        priv=input("Introduzca el PATH de su clave privada >>>")
        conter+=1
        p = getpass.getpass()
        md=(b"dfddbfb4ed0062422b197ba376a8b186")
        md1=(b"80b1fbc8f325ac238ec938120cbc62aa")
        passinto=funk.input_to_hash(p)
        if funk.comp(passinto, md)==0:
            a=0
            try:
                er=importDatabase.rsa(priv)
            except ValueError:
                os.system("clear")
                print("el formato del archivo no es correcto")
                return 0
            hashtocompare=funk.rsaTohash(er)
            sd=funk.comp(hashtocompare,md1)
            if sd==0:
                return 1

if __name__=="__main__":
    try:       
        main()
    except KeyboardInterrupt:
        os.system("clear")
        exit()



